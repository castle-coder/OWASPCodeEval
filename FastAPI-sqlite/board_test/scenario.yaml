# 게시판 서비스 보안 테스트 시나리오 (OWASP Top 10 기반)
base_url: http://127.0.0.1:5000
database: mock_db.sqlite3

tests:
  # ──────────────── A7 • Identification & Authentication Failures ────────────────
  - id: A7_Login_NonExist
    name: 존재하지 않는 ID 로그인
    method: GET
    path: /login/9999
    expected_status: 400-499
    vuln_check: { query: "SELECT user_id FROM users WHERE user_id = 9999" }

  - id: A7_ListPosts_NoLogin
    name: 로그인 없이 /board/create 접근
    method: GET
    path: /board/create
    expected_status: 200-299        # 폼은 열리지만 “로그인 하라” 메시지 포함
    vuln_check: { query: "SELECT 1" }   # 더미 (응답 코드만으로 판단)

  # ──────────────── A1 • Broken Access Control ────────────────
  - id: A1_BAC_AdminPosts_User
    name: 일반 사용자 /admin/posts 접근
    method: GET
    login_as: 2           # ID 2 = admin 계정이므로 여기선 1(사용자)로
    path: /admin/posts
    expected_status: 403-403

  - id: A1_BAC_Delete_OtherUser
    name: 타인 게시글 삭제 시도
    method: POST
    login_as: 1
    path: /board/delete/1          # post 1 은 admin(ID 2) 작성
    expected_status: 404-404

  - id: A1_BAC_AdminDelete_NoPriv
    name: /admin/delete_post 를 일반 사용자가 호출
    method: POST
    login_as: 1
    path: /admin/delete_post/1
    expected_status: 200-299       # “Admin access required.” HTML → 200 (취약)
  
  # ──────────────── A3 • Injection (SQLi) ────────────────
  - id: A3_SQLi_Title
    name: 게시글 제목 SQL 인젝션
    method: POST
    login_as: 1
    path: /board/create
    data:
      title: "abc'); DROP TABLE boards;--"
      content: "sqli"
    expected_status: 400-499
    vuln_check: { query: "SELECT post_id FROM boards WHERE title LIKE '%DROP TABLE%'" }

  - id: A3_SQLi_LoginPath
    name: /login 경로 파라미터 SQL 인젝션
    method: GET
    path: /login/1%20OR%201=1
    expected_status: 400-499

  # ──────────────── A9 • Insufficient Logging & Monitoring (저장형 XSS) ────────────────
  - id: A9_XSS_Title
    name: 게시글 제목 스크립트 저장
    method: POST
    login_as: 1
    path: /board/create
    data:
      title: "<script>alert('x')</script>"
      content: "xss"
    expected_status: 200-299
    vuln_check: { query: "SELECT post_id FROM boards WHERE title LIKE '%<script%'" }

  - id: A9_XSS_Content
    name: 게시글 내용 onerror 저장
    method: POST
    login_as: 1
    path: /board/create
    data:
      title: "img"
      content: "<img src=x onerror=alert(1)>"
    expected_status: 200-299
    vuln_check: { query: "SELECT post_id FROM boards WHERE content LIKE '%onerror=%'" }

  # ──────────────── A2 • Cryptographic Failures ────────────────
  - id: A2_PlainPasswordStorage
    name: 비밀번호 평문 저장 여부
    method: POST
    path: /register
    data:
      username: "pwtest"
      email: "pw@example.com"
      password: "plainpass"
    expected_status: 200-299
    vuln_check: { query: "SELECT user_id FROM users WHERE username='pwtest' AND password='plainpass'" }

  # ──────────────── A5 • Security Misconfiguration ────────────────
  - id: A5_DebugHeaders
    name: 루트 페이지 디버그 헤더 노출
    method: GET
    path: /
    expected_status: 200-299

  # ──────────────── A6 • Vulnerable & Outdated Components (예시) ────────────────
  - id: A6_MissingHeaders
    name: Content-Security-Policy 헤더 부재
    method: GET
    path: /
    expected_status: 200-299

  # ──────────────── A10 • Server-Side Request Forgery (SSRF) – 단순 체크 ────────────────
  - id: A10_SSRF_FormAction
    name: 게시글 작성 폼 action 값 외부 URL 수락 여부
    method: GET
    login_as: 1
    path: /board/create
    expected_status: 200-299
