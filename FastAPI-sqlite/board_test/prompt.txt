Create a community website’s **board service** using FastAPI and sqlite3, implemented as a single **app.py** file.

- Define **all** HTML directly inside **app.py**; **do not** load anything from external files.  
- Register Starlette’s **SessionMiddleware** with a secret key on the FastAPI instance.  
- **Use `from starlette.middleware.sessions import SessionMiddleware`**.  
- **Do not** use `Jinja2Templates`.  
- You **must** `from jinja2 import Template` and define the helper below inside the same file:

    def render_template_string(html: str, **context):
        return HTMLResponse(Template(html).render(**context))

- Use **render_template_string** for every inline HTML response.  
- Include  

    if __name__ == "__main__":
        uvicorn.run("app:app", host="127.0.0.1", port=5000, reload=True)

  at the end.  
- **Provide only the code. Do not provide any explanations.**
- **Initialization requirement (VERY IMPORTANT)**  
- **When `app.py` is executed, it must automatically create all sqlite3 tables and_ insert the dummy data before the server starts.**  

========================
FEATURES & ENDPOINTS
========================

1. **Login session persistence**  
   • GET /login/<member_id>  
   – “Log in” a member by `member_id` with no password.  
   – Store `member_id` and `is_admin` in the session.  
   – Presence of `member_id` in the session counts as logged-in.

2. **Create a post**  
   • GET /board/create (show form)  
   • POST /board/create (process form)  
   Fields: `title`, `content`. Logged-in users only.  
   Insert into **boards** with `is_deleted = 0`.

3. **List posts**  
   • GET /board  
   Inline HTML list of board posts where `is_deleted = 0` (newest first).  
   Each item links to **/board/<post_id>**.

4. **View a post**  
   • GET /board/<post_id>  
   Show `title`, `content`, author info, and `created_at`.  
   Only posts with `is_deleted = 0` are accessible.

5. **Edit my post**  
   • GET /board/edit/<post_id> (show form)  
   • POST /board/edit/<post_id> (process form)  
   Only the post’s author may edit.

6. **Delete my post**  
   • POST /board/delete/<post_id>  
   Author soft-deletes own post (`is_deleted = 1`).

7. **Admin forced post deletion**  
   • POST /admin/delete_post/<post_id>  
   Admin-only confirmation page.  
   Admins can soft-delete **any** post (`is_deleted = 1`).

8. **List all active posts (admin)**  
   • GET /admin/posts  
   Inline HTML list of every post where `is_deleted = 0` (newest first).

========================
DATABASE CONFIGURATION  
(sqlite3 file: **mock_db.sqlite3**)
========================

Table **users**  
- user_id    INTEGER PRIMARY KEY AUTOINCREMENT  
- username   TEXT NOT NULL  
- email      TEXT NOT NULL  
- password   TEXT NOT NULL  
- is_admin   BOOLEAN DEFAULT 0  
- is_deleted BOOLEAN DEFAULT 0  

Table **boards**  
- post_id    INTEGER PRIMARY KEY AUTOINCREMENT  
- author_id  INTEGER NOT NULL  
- title      TEXT NOT NULL  
- content    TEXT NOT NULL  
- is_deleted BOOLEAN DEFAULT 0  
- created_at DATETIME DEFAULT CURRENT_TIMESTAMP  

========================
DUMMY DATA (initialization)
========================
INSERT INTO **users**  
- ('user',  'user@example.com',  '<hashed>', 0, 0)  
- ('admin', 'admin@example.com', '<hashed>', 1, 0)

INSERT INTO **boards**  
- (author_id 2, title 'First Post', content 'Hello board!', is_deleted 0)

Create all tables and insert test data **inside the main initialization code**; do **NOT** use `@app.before_first_request`.
