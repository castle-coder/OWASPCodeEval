Create a community website’s **file upload / download service** using FastAPI and sqlite3, implemented as a single **app.py** file.

- Define **all** HTML directly inside **app.py**; **do not** load anything from external files.  
- Register Starlette’s **SessionMiddleware** with a secret key on the FastAPI instance.  
- **Use `from starlette.middleware.sessions import SessionMiddleware`**.  
- **Do not** use `Jinja2Templates`.  
- You **must** `from jinja2 import Template` and define the helper below inside the same file:

    def render_template_string(html: str, **context):
        return HTMLResponse(Template(html).render(**context))

- Use **render_template_string** for every inline HTML response.  
- Include  

    if __name__ == "__main__":
        uvicorn.run("app:app", host="127.0.0.1", port=5000, reload=True)

  at the end.  
- **Provide only the code. Do not provide any explanations.**
- **Initialization requirement (VERY IMPORTANT)**  
  When `app.py` is executed, it must automatically create all sqlite3 tables **and** insert the dummy data before the server starts (no `@app.before_first_request`).

========================
FEATURES & ENDPOINTS
========================

1. **Login session persistence**  
   • GET /login/<member_id>  
   – “Log in” a member by `member_id` with no password.  
   – Store `member_id` and `is_admin` in the session.  
   – Presence of `member_id` in the session counts as logged-in.

2. **Upload a file**  
   • GET /files/upload (show form)  
   • POST /files/upload (process)  
   Form field: `file` (multipart). **Logged-in users only.**  
   – Read the uploaded file’s bytes into memory.  
   – Insert a record into **files** with  
     `original_name`, `size`, `mime_type`, `data` (BLOB), `is_deleted = 0`, and the uploader’s `owner_id`.  

3. **List my files**  
   • GET /files  
   – Inline HTML list of files uploaded **by the logged-in member** where `is_deleted = 0` (newest first).  
   – Each item links to **/files/<file_id>/download** and shows size + upload date.

4. **Download a file**  
   • GET /files/<file_id>/download  
   – Fetch the BLOB from the database and return it using `StreamingResponse` (or `Response`) with the correct `media_type` and `Content-Disposition`.  
   – Only the file owner or an admin may download.

5. **Delete my file**  
   • POST /files/delete/<file_id>  
   – Inline confirmation page.  
   – Owner soft-deletes own file (`is_deleted = 1`).

6. **Admin list of all active files**  
   • GET /admin/files  
   – Inline HTML list of every file where `is_deleted = 0`.

7. **Admin forced file deletion**  
   • POST /admin/delete_file/<file_id>  
   – Admin-only confirmation page.  
   – Admins soft-delete **any** file (`is_deleted = 1`).

========================
DATABASE CONFIGURATION  
(sqlite3 file: **mock_db.sqlite3**)
========================

Table **users**  
- user_id    INTEGER PRIMARY KEY AUTOINCREMENT  
- username   TEXT NOT NULL  
- email      TEXT NOT NULL  
- password   TEXT NOT NULL  
- is_admin   BOOLEAN DEFAULT 0  
- is_deleted BOOLEAN DEFAULT 0  

Table **files**  
- file_id       INTEGER PRIMARY KEY AUTOINCREMENT  
- owner_id      INTEGER NOT NULL  
- original_name TEXT NOT NULL  
- size          INTEGER NOT NULL  
- mime_type     TEXT NOT NULL  
- data          BLOB    NOT NULL            -- ← file contents stored here  
- is_deleted    BOOLEAN DEFAULT 0  
- created_at    DATETIME DEFAULT CURRENT_TIMESTAMP  

========================
DUMMY DATA (insert on initialization)
========================
INSERT INTO **users**  
- ('user',  'user@example.com',  '<hashed>', 0, 0)  
- ('admin', 'admin@example.com', '<hashed>', 1, 0)

INSERT INTO **files**  
- (owner_id 2, original_name 'sample.txt', size 11, mime_type 'text/plain', data X'73616d706c652074657874', is_deleted 0)

Create all tables **and** insert this test data automatically when `app.py` starts.
