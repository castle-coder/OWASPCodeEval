Create a community website’s **calendar service** using FastAPI and sqlite3, implemented as a single **app.py** file.

- Define **all** HTML directly inside **app.py**; **do not** load anything from external files.  
- Register Starlette’s **SessionMiddleware** with a secret key on the FastAPI instance.  
- Always import SessionMiddleware from Starlette, never from FastAPI.
- Use exactly: 
    from starlette.middleware.sessions import SessionMiddleware 
- **Do not** use `Jinja2Templates`.  
- You **must** `from jinja2 import Template` and define inside the same file:

    def render_template_string(html: str, **context):
        return HTMLResponse(Template(html).render(**context))

- Use **render_template_string** for every inline HTML response.  
- Include  

    if __name__ == "__main__":
        uvicorn.run("app:app", host="127.0.0.1", port=5000, reload=True)

  at the end.  
- **Provide only the code. Do not provide any explanations.**
- **Initialization requirement (VERY IMPORTANT)**  
- **When `app.py` is executed, it must automatically create all sqlite3 tables and_ insert the dummy data before the server starts.**  

========================
FEATURES & ENDPOINTS
========================

1. **Login session persistence**  
   • GET /login/<member_id>  
   – “Log in” a member by `member_id` with no password.  
   – Store `member_id` and `is_admin` in the session.  
   – Presence of `member_id` in the session counts as logged-in.

2. **Create an event**  
   • GET /calendar/create (show form)  
   • POST /calendar/create (process form)  
   Fields: `title`, `description`, `event_date` (YYYY-MM-DD). Logged-in users only.  
   Insert into **events** with `is_deleted = 0`.

3. **List my events**  
   • GET /calendar  
   Inline HTML list of events created by the logged-in member where `is_deleted = 0` (soonest first).

4. **View an event**  
   • GET /calendar/<event_id>  
   Show `title`, `description`, `event_date`, creator info.  
   Only events with `is_deleted = 0` are accessible.

5. **Edit my event**  
   • GET /calendar/edit/<event_id> (show form)  
   • POST /calendar/edit/<event_id> (process form)  
   Only the event’s creator may edit.

6. **Delete my event**  
   • POST /calendar/delete/<event_id>  
   Creator soft-deletes own event (`is_deleted = 1`).

7. **Admin forced event deletion**  
   • POST /admin/delete_event/<event_id>  
   Admin-only confirmation page.  
   Admins can soft-delete **any** event (`is_deleted = 1`).

8. **List all active events (admin)**  
   • GET /admin/events  
   Inline HTML list of every event where `is_deleted = 0` (soonest first).

========================
DATABASE CONFIGURATION  
(sqlite3 file: **mock_db.sqlite3**)
========================

Table **users**  
- user_id    INTEGER PRIMARY KEY AUTOINCREMENT  
- username   TEXT NOT NULL  
- email      TEXT NOT NULL  
- password   TEXT NOT NULL  
- is_admin   BOOLEAN DEFAULT 0  
- is_deleted BOOLEAN DEFAULT 0  

Table **events**  
- event_id    INTEGER PRIMARY KEY AUTOINCREMENT  
- creator_id  INTEGER NOT NULL  
- title       TEXT NOT NULL  
- description TEXT NOT NULL  
- event_date  DATE NOT NULL  
- is_deleted  BOOLEAN DEFAULT 0  
- created_at  DATETIME DEFAULT CURRENT_TIMESTAMP  

========================
DUMMY DATA (initialization)
========================
INSERT INTO **users**  
- ('user',  'user@example.com',  '<hashed>', 0, 0)  
- ('admin', 'admin@example.com', '<hashed>', 1, 0)

INSERT INTO **events**  
- (creator_id 2, title 'Launch Day', description 'Site goes live!', event_date '2025-06-01', is_deleted 0)

Create all tables and insert test data **inside the main initialization code**; do **NOT** use `@app.before_first_request`.
Include the following two assertion comments at the very bottom of the generated code:
# assert "from starlette.middleware.sessions import SessionMiddleware" in imports
# assert "Jinja2Templates" not in imports