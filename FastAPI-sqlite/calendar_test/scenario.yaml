# Calendar / Events 서비스 보안 테스트 시나리오 (OWASP Top 10 중 핵심 항목)
base_url: http://127.0.0.1:5000
database: mock_db.sqlite3

tests:
  # ──────────────── A7 • Identification & Authentication Failures ───────────────
  - id: A7_Login_NonExist
    name: 존재하지 않는 ID 로그인
    method: GET
    path: /login/9999
    expected_status: 400-499                # 허용되면 취약

  # ──────────────── A1 • Broken Access Control ───────────────
  - id: A1_BAC_Create_NoLogin
    name: 로그인 없이 이벤트 생성 시도
    method: POST
    path: /calendar/create
    data: { title: "no-auth", description: "fail", event_date: "2030-01-01" }
    expected_status: 401-401

  - id: A1_BAC_List_NoLogin
    name: 로그인 없이 내 이벤트 목록 조회
    method: GET
    path: /calendar
    expected_status: 401-401

  - id: A1_BAC_AdminEvents_User1
    name: 일반 사용자(ID 1) /admin/events 접근
    method: GET
    login_as: 1            # user_id 1 → is_admin True (취약 로직)
    path: /admin/events
    expected_status: 403-403

  - id: A1_BAC_AdminEvents_User2
    name: 실제 관리자(ID 2) /admin/events 접근 거부 여부
    method: GET
    login_as: 2            # user_id 2 = admin 계정이지만 is_admin False 처리(취약)
    path: /admin/events
    expected_status: 200-299

  - id: A1_BAC_Delete_OtherUser
    name: 타인 이벤트 삭제 시도
    method: POST
    login_as: 1
    path: /calendar/delete/1          # event 1 은 admin(ID 2) 소유
    expected_status: 404-404

  # ──────────────── A3 • Injection (SQLi) ───────────────
  - id: A3_SQLi_EventTitle
    name: 이벤트 제목 SQL 인젝션
    method: POST
    login_as: 1
    path: /calendar/create
    data:
      title: "abc'); DROP TABLE events;--"
      description: "inject"
      event_date: "2030-01-01"
    expected_status: 400-499
    vuln_check:
      query: "SELECT event_id FROM events WHERE title LIKE '%DROP TABLE%'"

  - id: A3_SQLi_PathParam
    name: /calendar/<id> 경로 SQL 인젝션
    method: GET
    login_as: 1
    path: /calendar/1%20OR%201=1
    expected_status: 400-499

  # ──────────────── A9 • Insufficient Logging & Monitoring (XSS 저장) ───────────────
  - id: A9_XSS_Description
    name: 이벤트 설명에 스크립트 저장
    method: POST
    login_as: 1
    path: /calendar/create
    data:
      title: "xss-desc"
      description: "<script>alert('x')</script>"
      event_date: "2030-01-01"
    expected_status: 200-299
    vuln_check:
      query: "SELECT event_id FROM events WHERE description LIKE '%<script%'"

  - id: A9_XSS_Title
    name: 이벤트 제목에 스크립트 저장
    method: POST
    login_as: 1
    path: /calendar/create
    data:
      title: "<img src=x onerror=alert(1)>"
      description: "xss-title"
      event_date: "2030-01-01"
    expected_status: 200-299
    vuln_check:
      query: "SELECT event_id FROM events WHERE title LIKE '%onerror=%'"
