# Simple 회원 관리 API 보안 테스트 시나리오 (확장판)
base_url: http://127.0.0.1:5000
database: mock_db.sqlite3

tests:
  # ────────── 기존 테스트 (생략 가능) ──────────
  # … A1, A2, A3, A7, A9 항목들이 이미 정의돼 있다고 가정 …

  # ────────── A1 • Broken Access Control (추가) ──────────
  - id: A1_Profile_NoLogin
    name: 로그인 없이 /profile 접근
    method: GET
    path: /profile
    expected_status: 401-401

  - id: A1_ProfileUpdate_NoLogin
    name: 로그인 없이 /profile/update 호출
    method: POST
    path: /profile/update
    data: { username: "x", email: "x@x.com", password: "x" }
    expected_status: 401-401

  - id: A1_Delete_NoLogin
    name: 로그인 없이 /profile/delete 호출
    method: POST
    path: /profile/delete
    expected_status: 401-401

  - id: A1_AdminDelete_Self
    name: 관리자(ID 2) 자기 계정 /admin/delete_member 호출
    method: POST
    login_as: 2
    path: /admin/delete_member/2
    expected_status: 200-299     # 401/403 이면 안전, 200 이면 위험 논리라 “취약” 판정

  # ────────── A3 • Injection (SQLi) ──────────
  - id: A3_SQLi_RegisterEmail
    name: 회원가입 Email SQL 인젝션
    method: POST
    path: /register
    data:
      username: "sqli2"
      email: "evil'); DROP TABLE users;--@ex.com"
      password: "Hack123!"
    expected_status: 400-499
    vuln_check:
      query: "SELECT name FROM sqlite_master WHERE type='table' AND name='users'"

  - id: A3_SQLi_ProfileUpdate
    name: 프로필 업데이트 Username SQL 인젝션
    method: POST
    login_as: 1
    path: /profile/update
    data:
      username: "abc'); DROP TABLE users;--"
      email: "profile@ex.com"
      password: "p123"
    expected_status: 400-499
    vuln_check:
      query: "SELECT name FROM sqlite_master WHERE type='table' AND name='users'"

  # ────────── A9 • Stored XSS ──────────
  - id: A9_XSS_ProfileUsername
    name: 프로필 업데이트 Username XSS 저장
    method: POST
    login_as: 1
    path: /profile/update
    data:
      username: "<script>alert('p')</script>"
      email: "xssprof@ex.com"
      password: "xss123"
    expected_status: 200-299
    vuln_check:
      query: "SELECT user_id FROM users WHERE username LIKE '%<script%'"

  # ────────── A5 • Security Misconfiguration ──────────
  - id: A5_Header_HSTS_Missing
    name: HSTS 헤더 부재
    method: GET
    path: /
    expected_status: 200-299

  # ────────── A6 • Vulnerable & Out-of-Date Components ──────────
  - id: A6_PUT_Root
    name: PUT / (정의되지 않은 메서드)
    method: PUT
    path: /
    expected_status: 405-405

  - id: A6_OPTIONS_Root
    name: OPTIONS / 허용 여부
    method: OPTIONS
    path: /
    expected_status: 200-299        # 200 이면 잠재적 정보 노출 → “취약”으로 표시
