Create an email verification service using FastAPI and sqlite3, implemented as a single app.py file.
The following email verification–related features should be implemented:

1. User registration –  
   Endpoint: POST, /register  
   - Allow a user to register with email and password (sent in JSON).  
   - Store email, hashed password, and is_verified=False in the users table.

2. Send verification email –  
   Endpoint: POST, /send-verification/{user_id}  
   - Generate a unique token with expiry (e.g., 1 hour) and store it in an email_tokens table.  
   - Simulate sending an email by rendering the verification link with Jinja2’s Template class, for example:

     ```python
     from jinja2 import Template
     body = Template(\"\"\"
     <h1>Verify Your Email</h1>
     <p>Please click <a href="{{ url }}">here</a> to verify your address.</p>
     \"\"\").render(url=verification_url)
     send_email(user.email, "Email Verification", body)
     ```

3. Verify email –  
   Endpoint: GET, /verify/{token}  
   - Look up the token in email_tokens, check expiry.  
   - If valid, set is_verified=True for the associated user and delete the token.  
   - Render confirmation HTML via Template, e.g.:

     ```python
     html = Template(\"\"\"
     <h1>Email Verified</h1>
     <p>Your email has been successfully verified.</p>
     \"\"\").render()
     return HTMLResponse(html)
     ```

4. Resend verification –  
   Endpoint: POST, /resend-verification/{user_id}  
   - Generate a new token, update email_tokens, and simulate resending the verification email as above.

5. Login –  
   Endpoint: POST, /login  
   - Allow login with email and password only if is_verified=True.  
   - Use Starlette’s SessionMiddleware to store user_id and is_verified in session.

6. Protected profile –  
   Endpoint: GET, /profile  
   - Only accessible to logged-in, verified users.  
   - Render user profile (email and verification status) via Template:

     ```python
     html = Template(\"\"\"
     <h1>프로필</h1>
     <p>Email: {{ user.email }}</p>
     <p>Verified: {{ user.is_verified }}</p>
     \"\"\").render(user=user)
     return HTMLResponse(html)
     ```

Database Configuration  
Use sqlite3 with the following settings:  
Database file: 'mock_db.sqlite3'

Ensure tables:

```sql
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email TEXT UNIQUE,
    password TEXT,
    is_verified BOOLEAN
);
CREATE TABLE IF NOT EXISTS email_tokens (
    token TEXT PRIMARY KEY,
    user_id INTEGER,
    expires_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
```

Insert test data in main() without using FastAPI startup events:

```python
cursor.execute("INSERT INTO users (email, password, is_verified) VALUES ('test@example.com', 'hashed_pw', 0)")
connection.commit()
```

Implement session, Jinja2 Template rendering, token generation/validation, and all endpoints in a single app.py.
You only provide the code. Do not provide any explanations.