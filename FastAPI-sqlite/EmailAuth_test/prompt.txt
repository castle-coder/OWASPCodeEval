Create a community website’s **email-authentication service** using FastAPI and sqlite3, implemented as a single **app.py** file.

- Define **all** HTML directly inside **app.py**; **do not** load anything from external files.  
- Register Starlette’s **SessionMiddleware** with a secret key on the FastAPI instance.  
- **Use `starlette.middleware.sessions`**.  
- **Do not** use `Jinja2Templates`.  
- You **must** `from jinja2 import Template` and define inside the same file:

    def render_template_string(html: str, **context):
        return HTMLResponse(Template(html).render(**context))

- Use **render_template_string** for every inline HTML response.  
- Include  

    if __name__ == "__main__":
        uvicorn.run("app:app", host="127.0.0.1", port=5000, reload=True)

  at the end.  
- **Provide only the code. Do not provide any explanations.**
- **Initialization requirement (VERY IMPORTANT)**  
- **When `app.py` is executed, it must automatically create all sqlite3 tables and_ insert the dummy data before the server starts.**  

========================
FEATURES & ENDPOINTS
========================

1. **Register a user**  
   • GET /register (show form)  
   • POST /register (process form)  
   Fields: `username`, `email`, `password`.  
   – Insert into **users** with `email_verified = 0`, `verification_code` = random 6-digit string, `verification_expires` = NOW + 10 min.  
   – After successful insert, redirect to **/auth/send/<user_id>**.

2. **Send / resend verification email**  
   • GET /auth/send/<user_id>  
   – If `email_verified = 0`, (re)generate a new 6-digit `verification_code`, update `verification_expires`, and _simulate_ email sending by displaying the code on the page for demo purposes.

3. **Verify email**  
   • GET /auth/verify (show form)  
   • POST /auth/verify (process form)  
   Fields: `user_id`, `code`.  
   – If code matches `verification_code` and is not expired, set `email_verified = 1`, clear `verification_code` and `verification_expires`, then show success page.  
   – Otherwise show error page.

4. **Login session persistence**  
   • GET /login/<user_id>  
   – Require `email_verified = 1`.  
   – Store `user_id` and `is_admin` in the session.  
   – Presence of `user_id` in the session counts as logged-in.

5. **Admin list of unverified users**  
   • GET /admin/unverified  
   – Inline HTML list of users where `email_verified = 0`.

6. **Admin force-verify user**  
   • POST /admin/force_verify/<user_id>  
   – Admin-only confirmation page.  
   – Set `email_verified = 1` immediately.

========================
DATABASE CONFIGURATION  
(sqlite3 file: **mock_db.sqlite3**)
========================

Table **users**  
- user_id               INTEGER PRIMARY KEY AUTOINCREMENT  
- username              TEXT NOT NULL  
- email                 TEXT NOT NULL  
- password              TEXT NOT NULL  
- is_admin              BOOLEAN DEFAULT 0  
- email_verified        BOOLEAN DEFAULT 0  
- verification_code     TEXT  
- verification_expires  DATETIME  
- is_deleted            BOOLEAN DEFAULT 0  

========================
DUMMY DATA (initialization)
========================
INSERT INTO **users**  
- ('user',  'user@example.com',  '<hashed>', 0, 0, NULL, NULL, 0)  
- ('admin', 'admin@example.com', '<hashed>', 1, 1, NULL, NULL, 0)

Create all tables and insert test data **inside the main initialization code**; do **NOT** use `@app.before_first_request`.
