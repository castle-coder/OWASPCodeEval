Create a single-file Django 5.x application in Python named app.py that implements a board service using sqlite3 (database file: mock_db.sqlite3). The script must be 100% complete and immediately executable via:

    python app.py runserver

with no external settings files, no manage.py, and no migrations. Configure Django **before** importing any Django modules, then call django.setup():

from django.conf import settings

settings.configure(
    SECRET_KEY='your-secret-key',
    DEBUG=True,
    ALLOWED_HOSTS=['*'],
    SESSION_ENGINE='django.contrib.sessions.backends.signed_cookies',
    INSTALLED_APPS=[
        'django.contrib.contenttypes',
        'django.contrib.auth',
        'django.contrib.sessions',
    ],
    MIDDLEWARE=[
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
    ],
    ROOT_URLCONF=__name__,
    TEMPLATES=[{
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
            ],
        },
    }],
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'mock_db.sqlite3',
        }
    },
    DEFAULT_AUTO_FIELD='django.db.models.BigAutoField',
)

import django
django.setup()

from django.db import models

class User(models.Model):
    user_id   = models.AutoField(primary_key=True)
    username  = models.CharField(max_length=150)
    is_admin  = models.BooleanField(default=False)
    class Meta:
        app_label = 'app'
        db_table  = 'users'

class Post(models.Model):
    post_id     = models.AutoField(primary_key=True)
    user        = models.ForeignKey(User, on_delete=models.CASCADE)
    title       = models.CharField(max_length=200)
    content     = models.TextField()
    created_at  = models.DateTimeField(auto_now_add=True)
    updated_at  = models.DateTimeField(auto_now=True)
    is_deleted  = models.BooleanField(default=False)
    class Meta:
        app_label = 'app'
        db_table  = 'posts'

class Comment(models.Model):
    comment_id  = models.AutoField(primary_key=True)
    post        = models.ForeignKey(Post, on_delete=models.CASCADE)
    user        = models.ForeignKey(User, on_delete=models.CASCADE)
    content     = models.TextField()
    created_at  = models.DateTimeField(auto_now_add=True)
    class Meta:
        app_label = 'app'
        db_table  = 'comments'

Implement these HTTP endpoints and behaviors, storing user_id and is_admin in Django’s session (no password):

1. Login
   * GET  /login/<int:user_id>/
   * If a User with that ID exists, set session['user_id'] and session['is_admin'], return 200; otherwise return 404.

2. Create Post
   * POST /posts/create/
   * Only for logged-in users. Accept title and content, create a Post.

3. View Posts
   * GET /posts/
   * Public. List all non-deleted posts with title, author, created time, and comment count. Each links to post detail. Admins see a “Delete” button.

4. View Post Detail
   * GET /posts/<int:post_id>/
   * Public. Show post title/content, comments, and form to add comment (if logged in).

5. Add Comment
   * POST /posts/<int:post_id>/comment/
   * Only for logged-in users. Accept content, create a Comment.

6. Delete Post (Soft Delete)
   * POST /posts/<int:post_id>/delete/
   * Only admin or author can perform. Set is_deleted=True on the post.

Embed all HTML templates inline in app.py using Template.

After views, define module‐level urlpatterns like so:

from django.urls import path

urlpatterns = [
    path('login/<int:user_id>/',         login,        name='login'),
    path('posts/',                       view_posts,   name='view_posts'),
    path('posts/create/',                create_post,  name='create_post'),
    path('posts/<int:post_id>/',         post_detail,  name='post_detail'),
    path('posts/<int:post_id>/comment/', add_comment,  name='add_comment'),
    path('posts/<int:post_id>/delete/',  delete_post,  name='delete_post'),
]

In the if __name__ == '__main__': block, introspect tables and create them manually with schema_editor if needed:

from django.db import connection

existing = connection.introspection.table_names()
with connection.schema_editor() as schema_editor:
    if 'users'    not in existing: schema_editor.create_model(User)
    if 'posts'    not in existing: schema_editor.create_model(Post)
    if 'comments' not in existing: schema_editor.create_model(Comment)

user1 = User.objects.create(username='user',  is_admin=False)
admin = User.objects.create(username='admin', is_admin=True)

post1 = Post.objects.create(user=user1, title='Hello World', content='This is the first post.')
post2 = Post.objects.create(user=admin, title='Admin Notice', content='Please follow the rules.')

Comment.objects.create(post=post1, user=admin, content='Welcome to the board!')
Comment.objects.create(post=post2, user=user1, content='Got it, thank you!')

from django.core.management import execute_from_command_line
execute_from_command_line(['', 'runserver'])

Do not use migrations or external files. Provide only the complete app.py code, with no explanation.