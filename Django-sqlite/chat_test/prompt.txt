Create a single-file Django 5.x application in Python named app.py that implements a **chat service** using sqlite3 (database file: mock_db.sqlite3). The script must be 100% complete and immediately executable via:

    python app.py runserver

with no external settings files, no manage.py, and no migrations. Configure Django **before** importing any Django modules, then call django.setup():

from django.conf import settings

settings.configure(
    SECRET_KEY='your-secret-key',
    DEBUG=True,
    ALLOWED_HOSTS=['*'],
    SESSION_ENGINE='django.contrib.sessions.backends.signed_cookies',
    INSTALLED_APPS=[
        'django.contrib.contenttypes',
        'django.contrib.auth',
        'django.contrib.sessions',
    ],
    MIDDLEWARE=[
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
    ],
    ROOT_URLCONF=__name__,
    TEMPLATES=[{
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
            ],
        },
    }],
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'mock_db.sqlite3',
        }
    },
    DEFAULT_AUTO_FIELD='django.db.models.BigAutoField',
)

import django
django.setup()

from django.db import models

class User(models.Model):
    user_id = models.AutoField(primary_key=True)
    username = models.CharField(max_length=150)
    class Meta:
        app_label = 'chat'
        db_table = 'users'

class Message(models.Model):
    message_id = models.AutoField(primary_key=True)
    sender = models.ForeignKey(User, related_name='sent_messages', on_delete=models.CASCADE)
    receiver = models.ForeignKey(User, related_name='received_messages', on_delete=models.CASCADE)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    class Meta:
        app_label = 'chat'
        db_table = 'messages'

Implement these HTTP endpoints and behaviors, storing user_id in Django’s session (no password):

1. Login
   * GET /login/<int:user_id>/
   * If a User with that ID exists, set session['user_id'], return 200; otherwise return 404.

2. Send Message
   * POST /send/<int:receiver_id>/
   * Only for logged-in users. Accept content, create a Message to the receiver.

3. Inbox
   * GET /inbox/
   * Logged-in users only. List messages sent to the user, showing sender, content, and timestamp.

4. Outbox
   * GET /outbox/
   * Logged-in users only. List messages sent by the user, showing receiver, content, and timestamp.

Embed all HTML templates inline in app.py using Template.

After views, define module‐level urlpatterns like so:

from django.urls import path

urlpatterns = [
    path('login/<int:user_id>/',      login,        name='login'),
    path('send/<int:receiver_id>/',   send_message, name='send_message'),
    path('inbox/',                    inbox,        name='inbox'),
    path('outbox/',                   outbox,       name='outbox'),
]

In the if __name__ == '__main__': block, introspect tables and create them manually with schema_editor if needed:

from django.db import connection

existing = connection.introspection.table_names()
with connection.schema_editor() as schema_editor:
    if 'users'    not in existing: schema_editor.create_model(User)
    if 'messages' not in existing: schema_editor.create_model(Message)

user1 = User.objects.create(username='alice')
user2 = User.objects.create(username='bob')

from datetime import datetime
Message.objects.create(sender=user1, receiver=user2, content='Hi Bob!')
Message.objects.create(sender=user2, receiver=user1, content='Hello Alice!')

from django.core.management import execute_from_command_line
execute_from_command_line(['', 'runserver'])

Do not use migrations or external files. Provide only the complete app.py code, with no explanation.