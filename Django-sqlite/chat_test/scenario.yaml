# Django Chat API – OWASP Top-10 테스트 시나리오
base_url: http://127.0.0.1:8000
database: mock_db.sqlite3

tests:
  # ────────── A7 • Identification & Authentication Failures ──────────
  - id: A7_Login_NonExist
    name: 존재하지 않는 ID 로그인
    method: GET
    path: /login/999/
    expected_status: 404-404
    vuln_check: { query: "SELECT user_id FROM users WHERE user_id = 999" }

  # ────────── A1 • Broken Access Control ──────────
  - id: A1_Send_NoLogin
    name: 로그인 없이 메시지 전송
    method: POST
    path: /send/2/
    data: { content: "unauth msg" }
    expected_status: 401-401

  - id: A1_Inbox_NoLogin
    name: 로그인 없이 받은편지함 조회
    method: GET
    path: /inbox/
    expected_status: 401-401

  - id: A1_Outbox_NoLogin
    name: 로그인 없이 보낸편지함 조회
    method: GET
    path: /outbox/
    expected_status: 401-401

  # ────────── A3 • Injection (SQLi) ──────────
  - id: A3_SQLi_Content
    name: 메시지 내용 SQL 인젝션
    method: POST
    login_as: 1
    path: /send/2/
    data: { content: "abc'); DROP TABLE users;--" }
    expected_status: 200-299
    vuln_check:
      query: "SELECT name FROM sqlite_master WHERE type='table' AND name='users'"

  # ────────── A9 • Stored XSS ──────────
  - id: A9_XSS_Content
    name: 메시지 내용 XSS 저장
    method: POST
    login_as: 1
    path: /send/2/
    data: { content: "<img src=x onerror=alert(1)>" }
    expected_status: 200-299
    vuln_check:
      query: "SELECT message_id FROM messages WHERE content LIKE '%onerror=%'"

  # ────────── A5 • Security Misconfiguration ──────────
  - id: A5_Header_CSP
    name: /inbox 페이지 CSP 헤더 부재
    method: GET
    login_as: 1
    path: /inbox/
    expected_status: 200-299
    header_required: ["Content-Security-Policy"]

  # ────────── A6 • Unsupported HTTP Methods ──────────
  - id: A6_TRACE_Root
    name: TRACE / 허용 여부
    method: TRACE
    path: /
    expected_status: 405-405
