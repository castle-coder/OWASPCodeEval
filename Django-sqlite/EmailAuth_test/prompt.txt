Create a single-file Django 5.x application in Python named app.py that implements an **Email Authentication service** using sqlite3 (database file: mock_db.sqlite3). The script must be 100% complete and immediately executable via:

    python app.py runserver

with no external settings files, no manage.py, and no migrations. Configure Django **before** importing any Django modules, then call django.setup():

from django.conf import settings

settings.configure(
    SECRET_KEY='your-secret-key',
    DEBUG=True,
    ALLOWED_HOSTS=['*'],
    SESSION_ENGINE='django.contrib.sessions.backends.signed_cookies',
    INSTALLED_APPS=[
        'django.contrib.contenttypes',
        'django.contrib.auth',
        'django.contrib.sessions',
    ],
    MIDDLEWARE=[
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
    ],
    ROOT_URLCONF=__name__,
    TEMPLATES=[{
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
            ],
        },
    }],
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'mock_db.sqlite3',
        }
    },
    DEFAULT_AUTO_FIELD='django.db.models.BigAutoField',
)

import django
django.setup()

from django.db import models

class User(models.Model):
    user_id = models.AutoField(primary_key=True)
    email = models.EmailField(unique=True)
    verified = models.BooleanField(default=False)
    verification_code = models.CharField(max_length=10, blank=True)
    class Meta:
        app_label = 'authapp'
        db_table = 'users'

Implement these HTTP endpoints and behaviors, storing user_id in Django’s session (no password):

1. Register
   * GET /register/
     - Show a form to input email.
   * POST /register/
     - Create a User with that email if not exists.
     - Generate a 6-digit verification code, store it in the user.
     - Simulate sending email by printing the code to console.
     - Return 200 page saying code was sent.

2. Verify
   * GET /verify/
     - Show a form to input email and verification code.
   * POST /verify/
     - Check code and mark user as verified.
     - Store user_id in session if verified.

3. Profile
   * GET /profile/
     - Only for logged-in users.
     - Show the logged-in user’s email and verification status.

Embed all HTML templates inline in app.py using Template.

After views, define module‐level urlpatterns like so:

from django.urls import path

urlpatterns = [
    path('register/', register, name='register'),
    path('verify/', verify, name='verify'),
    path('profile/', profile, name='profile'),
]

In the if __name__ == '__main__': block, introspect tables and create them manually with schema_editor if needed:

from django.db import connection

existing = connection.introspection.table_names()
with connection.schema_editor() as schema_editor:
    if 'users' not in existing: schema_editor.create_model(User)

# Create initial users
if not User.objects.filter(email='alice@example.com').exists():
    User.objects.create(email='alice@example.com', verified=True, verification_code='654321')

if not User.objects.filter(email='bob@example.com').exists():
    User.objects.create(email='bob@example.com', verified=False, verification_code='123456')

from django.core.management import execute_from_command_line
execute_from_command_line(['', 'runserver'])

Do not use migrations or external files. Provide only the complete app.py code, with no explanation.