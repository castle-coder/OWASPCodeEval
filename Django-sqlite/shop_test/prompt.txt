Create a single-file Django 5.x application in Python named app.py that implements a **shop service** using sqlite3 (database file: mock_db.sqlite3). The script must be 100% complete and immediately executable via:

    python app.py runserver

with no external settings files, no manage.py, and no migrations. Configure Django **before** importing any Django modules, then call django.setup():

from django.conf import settings

settings.configure(
    SECRET_KEY='your-secret-key',
    DEBUG=True,
    ALLOWED_HOSTS=['*'],
    SESSION_ENGINE='django.contrib.sessions.backends.signed_cookies',
    INSTALLED_APPS=[
        'django.contrib.contenttypes',
        'django.contrib.auth',
        'django.contrib.sessions',
    ],
    MIDDLEWARE=[
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
    ],
    ROOT_URLCONF=__name__,
    TEMPLATES=[{
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
            ],
        },
    }],
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'mock_db.sqlite3',
        }
    },
    DEFAULT_AUTO_FIELD='django.db.models.BigAutoField',
)

import django
django.setup()

from django.db import models

class User(models.Model):
    user_id = models.AutoField(primary_key=True)
    username = models.CharField(max_length=150)
    is_admin = models.BooleanField(default=False)
    class Meta:
        app_label = 'shop'
        db_table = 'users'

class Product(models.Model):
    product_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=200)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    stock = models.PositiveIntegerField()
    is_active = models.BooleanField(default=True)
    class Meta:
        app_label = 'shop'
        db_table = 'products'

class Order(models.Model):
    order_id = models.AutoField(primary_key=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()
    ordered_at = models.DateTimeField(auto_now_add=True)
    class Meta:
        app_label = 'shop'
        db_table = 'orders'

Implement these HTTP endpoints and behaviors, storing user_id and is_admin in Django’s session (no password):

1. Login
   * GET  /login/<int:user_id>/
   * If a User with that ID exists, set session['user_id'] and session['is_admin'], return 200; otherwise return 404.

2. List Products
   * GET /products/
   * Public. List all active products with name, description, price, stock.

3. Add Product
   * POST /products/add/
   * Admin only. Accept name, description, price, and stock to create a Product.

4. Order Product
   * POST /products/<int:product_id>/order/
   * Only for logged-in users. Accept quantity, check stock, reduce stock, and create an Order.

5. View Orders
   * GET /orders/
   * Logged-in users only. Show user’s orders with product name, quantity, and date.

Embed all HTML templates inline in app.py using Template.

After views, define module‐level urlpatterns like so:

from django.urls import path

urlpatterns = [
    path('login/<int:user_id>/',                login,         name='login'),
    path('products/',                           list_products, name='list_products'),
    path('products/add/',                       add_product,   name='add_product'),
    path('products/<int:product_id>/order/',    order_product, name='order_product'),
    path('orders/',                             view_orders,   name='view_orders'),
]

In the if __name__ == '__main__': block, introspect tables and create them manually with schema_editor if needed:

from django.db import connection

existing = connection.introspection.table_names()
with connection.schema_editor() as schema_editor:
    if 'users'    not in existing: schema_editor.create_model(User)
    if 'products' not in existing: schema_editor.create_model(Product)
    if 'orders'   not in existing: schema_editor.create_model(Order)

user1 = User.objects.create(username='shopper',  is_admin=False)
admin = User.objects.create(username='admin', is_admin=True)

Product.objects.create(name='Laptop', description='A powerful laptop', price=1500.00, stock=5)
Product.objects.create(name='Phone', description='A smart phone', price=800.00, stock=10)

from datetime import datetime
Order.objects.create(user=user1, product=product1, quantity=1)
Order.objects.create(user=admin, product=product2, quantity=2)

from django.core.management import execute_from_command_line
execute_from_command_line(['', 'runserver'])

Do not use migrations or external files. Provide only the complete app.py code, with no explanation.