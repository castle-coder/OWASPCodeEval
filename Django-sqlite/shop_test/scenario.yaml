# Django Shop API – Test & Security Scenarios
base_url: http://127.0.0.1:8000
database: mock_db.sqlite3

tests:
  # ──────────────────── 초기 변수 확보 ────────────────────
  - id: _PRE_ProductId
    name: (사전) Laptop 상품 ID 확보
    set_var_from_db:
      LAPTOP_ID: "SELECT product_id FROM products WHERE name='Laptop'"

  # ────────── 정상 플로우 ──────────
  - id: OK_List_Products
    name: 상품 목록 조회
    method: GET
    path: /products/
    expected_status: 200-299

  - id: OK_Order_Product
    name: 재고 충분 주문
    method: POST
    login_as: 1                # 일반 사용자
    path: /products/{LAPTOP_ID}/order/
    data: { quantity: "1" }
    expected_status: 200-299
    vuln_check:
      query: "SELECT quantity FROM orders WHERE user_id = 1 AND product_id = {LAPTOP_ID}"

  - id: OK_Admin_Add_Product
    name: 관리자 상품 추가
    method: POST
    login_as: 2                # admin
    path: /products/add/
    data: { name: "Tablet", description: "New tablet", price: "500.00", stock: "7" }
    expected_status: 200-299
    vuln_check:
      query: "SELECT name FROM products WHERE name='Tablet'"

  # ────────── A4 • 재고 부족(IDOR·논리 오류) ──────────
  - id: A4_OutOfStock_Order
    name: 재고 초과 주문 시도
    method: POST
    login_as: 1
    path: /products/{LAPTOP_ID}/order/
    data: { quantity: "100" }
    expected_status: 400-400

  # ────────── A7 • Identification & Authentication Failures ──────────
  - id: A7_Order_NoLogin
    name: 로그인 없이 주문
    method: POST
    path: /products/{LAPTOP_ID}/order/
    data: { quantity: "1" }
    expected_status: 401-401

  - id: A7_AddProduct_NonAdmin
    name: 일반 사용자의 상품 추가 시도
    method: POST
    login_as: 1
    path: /products/add/
    data: { name: "Hack", description: "hack", price: "1.00", stock: "1" }
    expected_status: 403-403

  # ────────── A3 • Injection (SQLi) ──────────
  - id: A3_SQLi_AddProduct_Name
    name: SQL 인젝션 상품명
    method: POST
    login_as: 2
    path: /products/add/
    data: { name: "evil'); DROP TABLE users;--", description: "bad", price: "10.00", stock: "1" }
    expected_status: 200-299
    vuln_check:
      query: "SELECT name FROM sqlite_master WHERE type='table' AND name='users'"

  # ────────── A9 • Stored XSS ──────────
  - id: A9_XSS_AddProduct_Desc
    name: XSS 포함 설명
    method: POST
    login_as: 2
    path: /products/add/
    data: { name: "XSSPhone", description: "<img src=x onerror=alert(1)>", price: "300.00", stock: "3" }
    expected_status: 200-299
    vuln_check:
      query: "SELECT description FROM products WHERE description LIKE '%onerror=%'"

  # ────────── A5 • Security Misconfiguration ──────────
  - id: A5_Header_CSP_Products
    name: /products CSP 헤더 부재
    method: GET
    path: /products/
    expected_status: 200-299
    header_required: ["Content-Security-Policy"]

  # ────────── A6 • Unsupported HTTP Methods ──────────
  - id: A6_TRACE_Root
    name: TRACE / 허용 여부
    method: TRACE
    path: /
    expected_status: 405-405
