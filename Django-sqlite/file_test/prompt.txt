Create a single-file Django 5.x application in Python named app.py that implements a file upload/download service using sqlite3 (database file: mock_db.sqlite3). The script must be 100% complete and immediately executable via:

    python app.py runserver

with no external settings files, no manage.py, and no migrations. Configure Django **before** importing any Django modules, then call django.setup():

```python
from django.conf import settings

settings.configure(
    SECRET_KEY='your-secret-key',
    DEBUG=True,
    ALLOWED_HOSTS=['*'],
    SESSION_ENGINE='django.contrib.sessions.backends.signed_cookies',
    INSTALLED_APPS=[
        'django.contrib.contenttypes',
        'django.contrib.auth',
        'django.contrib.sessions',
    ],
    MIDDLEWARE=[
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
    ],
    ROOT_URLCONF=__name__,
    TEMPLATES=[{
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
            ],
        },
    }],
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'mock_db.sqlite3',
        }
    },
    DEFAULT_AUTO_FIELD='django.db.models.BigAutoField',
)

import django
django.setup()
```

– Use encrypted (signed) cookies for session storage by setting `SESSION_ENGINE='django.contrib.sessions.backends.signed_cookies'`.

Next, define three models—each must declare an explicit `app_label` in its Meta so they work outside a formal app directory—and set their `db_table` names to exactly `users`, `files`, and `reports`:

```python
from django.db import models

class User(models.Model):
    user_id   = models.AutoField(primary_key=True)
    username  = models.CharField(max_length=150)
    is_admin  = models.BooleanField(default=False)
    class Meta:
        app_label = 'app'
        db_table  = 'users'

class File(models.Model):
    id          = models.AutoField(primary_key=True)
    user        = models.ForeignKey(User, on_delete=models.CASCADE)
    file        = models.FileField(upload_to='uploads/')
    description = models.TextField(blank=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)
    is_blocked  = models.BooleanField(default=False)
    class Meta:
        app_label = 'app'
        db_table  = 'files'

class Report(models.Model):
    report_id  = models.AutoField(primary_key=True)
    file       = models.ForeignKey(File, on_delete=models.CASCADE)
    user       = models.ForeignKey(User, on_delete=models.CASCADE)
    reason     = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    class Meta:
        app_label = 'app'
        db_table  = 'reports'
```

Implement these HTTP endpoints and behaviors, storing `user_id` and `is_admin` in Django’s session (no password):

1. **Login**

   * GET  `/login/<int:user_id>/`
   * If a `User` with that ID exists, set `session['user_id']` and `session['is_admin']`, return 200; otherwise return 404.

2. **Upload**

   * POST `/upload/`
   * Only for logged-in users. Accept a file and optional `description`, save the file under `uploads/`, and create a `File` record.

3. **Download**

   * GET  `/download/<int:file_id>/`
   * Only for logged-in users. If `is_blocked=False`, return a `FileResponse` with `Content-Disposition`; otherwise return 403.

4. **View Files**

   * GET  `/files/`
   * Admins see all files; others see only `is_blocked=False`. Display filename, description, uploader’s username, upload time, and download link. Include a “Block” button for admins.

5. **Delete**

   * POST `/delete/<int:file_id>/`
   * Only the file’s owner may delete. Remove the file from disk and delete its record.

6. **Block (Admin Only)**

   * POST `/admin/block/<int:file_id>/`
   * Admins only. Set `is_blocked=True` on the `File`.

7. **Report**

   * POST `/report/<int:file_id>/`
   * Logged-in users only. Accept `reason` and insert a `Report` record.

Embed all HTML templates inline in app.py (e.g. using Django’s `Template` class or direct strings) so no external template files are needed.

**Important:** after defining your view functions, import Django’s URL helper and define a module‐level `urlpatterns` list mapping each endpoint to its view. This prevents the “no URL patterns” error:

```python
from django.urls import path

urlpatterns = [
    path('login/<int:user_id>/',      login,   name='login'),
    path('upload/',                   upload,  name='upload'),
    path('download/<int:file_id>/',   download,name='download'),
    path('files/',                    files,   name='files'),
    path('delete/<int:file_id>/',     delete,  name='delete'),
    path('admin/block/<int:file_id>/',block,   name='block'),
    path('report/<int:file_id>/',     report,  name='report'),
]
```

In the `if __name__ == '__main__':` block, avoid “table already exists” errors by first introspecting existing tables:

```python
existing = connection.introspection.table_names()
with connection.schema_editor() as schema_editor:
    if 'users'   not in existing: schema_editor.create_model(User)
    if 'files'   not in existing: schema_editor.create_model(File)
    if 'reports' not in existing: schema_editor.create_model(Report)

User.objects.create(username='user',  is_admin=False)
User.objects.create(username='admin', is_admin=True)

from django.core.management import execute_from_command_line
execute_from_command_line(['', 'runserver'])
```

Do **not** use Django migrations, `@app.before_first_request`, or external management commands. Provide **only** the complete `app.py` code, with no explanations or comments outside necessary docstrings.