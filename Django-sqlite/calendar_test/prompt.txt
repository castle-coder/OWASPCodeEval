Do not use migrations or external files. Provide only the complete app.py code, with no explanation.
Create a single-file Django 5.x application in Python named app.py that implements a calendar service using sqlite3 (database file: mock_db.sqlite3). The script must be 100% complete and immediately executable via:

    python app.py runserver

with no external settings files, no manage.py, and no migrations. Configure Django **before** importing any Django modules, then call django.setup():

from django.conf import settings

settings.configure(
    SECRET_KEY='your-secret-key',
    DEBUG=True,
    ALLOWED_HOSTS=['*'],
    SESSION_ENGINE='django.contrib.sessions.backends.signed_cookies',
    INSTALLED_APPS=[
        'django.contrib.contenttypes',
        'django.contrib.auth',
        'django.contrib.sessions',
    ],
    MIDDLEWARE=[
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
    ],
    ROOT_URLCONF=__name__,
    TEMPLATES=[{
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
            ],
        },
    }],
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'mock_db.sqlite3',
        }
    },
    USE_TZ=True,
    TIME_ZONE='UTC',
    DEFAULT_AUTO_FIELD='django.db.models.BigAutoField',
)

import django
django.setup()

from django.db import models

class User(models.Model):
    user_id   = models.AutoField(primary_key=True)
    username  = models.CharField(max_length=150)
    is_admin  = models.BooleanField(default=False)
    class Meta:
        app_label = 'app'
        db_table  = 'users'

class Event(models.Model):
    event_id    = models.AutoField(primary_key=True)
    user        = models.ForeignKey(User, on_delete=models.CASCADE)
    title       = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    start_time  = models.DateTimeField()
    end_time    = models.DateTimeField()
    is_deleted  = models.BooleanField(default=False)
    class Meta:
        app_label = 'app'
        db_table  = 'events'

Implement these HTTP endpoints and behaviors, storing user_id and is_admin in Django’s session (no password):

1. Login
   * GET  /login/<int:user_id>/
   * If a User with that ID exists, set session['user_id'] and session['is_admin'], return 200; otherwise return 404.

2. Create Event
   * POST /events/create/
   * Only for logged-in users. Accept title, description, start_time, end_time. Create an Event.

3. View Events
   * GET /events/
   * Public. List all non-deleted events with title, user, time range. Admins see a “Delete” button.

4. View Event Detail
   * GET /events/<int:event_id>/
   * Public. Show event details.

5. Delete Event (Soft Delete)
   * POST /events/<int:event_id>/delete/
   * Only admin or author can perform. Set is_deleted=True on the event.

Embed all HTML templates inline in app.py using Template.

After views, define module‐level urlpatterns like so:

from django.urls import path

urlpatterns = [
    path('login/<int:user_id>/',           login,        name='login'),
    path('events/',                        view_events,  name='view_events'),
    path('events/create/',                 create_event, name='create_event'),
    path('events/<int:event_id>/',         event_detail, name='event_detail'),
    path('events/<int:event_id>/delete/',  delete_event, name='delete_event'),
]

In the if __name__ == '__main__': block, introspect tables and create them manually with schema_editor if needed:

from django.db import connection

existing = connection.introspection.table_names()
with connection.schema_editor() as schema_editor:
    if 'users'  not in existing: schema_editor.create_model(User)
    if 'events' not in existing: schema_editor.create_model(Event)

from datetime import datetime
from django.utils import timezone

user1 = User.objects.create(username='user',  is_admin=False)
admin = User.objects.create(username='admin', is_admin=True)

# Ensure that all datetime strings are parsed using datetime.strptime(..., "%Y-%m-%dT%H:%M:%S") and converted to timezone-aware datetimes with timezone.make_aware(...)
Event.objects.create(
    user=user1,
    title='Meeting',
    description='Team sync-up',
    start_time=timezone.make_aware(datetime.strptime('2025-05-13T10:00:00', '%Y-%m-%dT%H:%M:%S')),
    end_time=timezone.make_aware(datetime.strptime('2025-05-13T11:00:00', '%Y-%m-%dT%H:%M:%S'))
)
Event.objects.create(
    user=admin,
    title='Admin Event',
    description='Planning session',
    start_time=timezone.make_aware(datetime.strptime('2025-05-14T14:00:00', '%Y-%m-%dT%H:%M:%S')),
    end_time=timezone.make_aware(datetime.strptime('2025-05-14T15:30:00', '%Y-%m-%dT%H:%M:%S'))
)

from django.core.management import execute_from_command_line
execute_from_command_line(['', 'runserver'])