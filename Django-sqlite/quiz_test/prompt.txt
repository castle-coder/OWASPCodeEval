Create a single-file Django 5.x application in Python named app.py that implements a quiz service using sqlite3 (database file: mock_db.sqlite3). The script must be 100% complete and immediately executable via:

    python app.py runserver

with no external settings files, no manage.py, and no migrations. Configure Django **before** importing any Django modules, then call django.setup():

from django.conf import settings

settings.configure(
    SECRET_KEY='your-secret-key',
    DEBUG=True,
    ALLOWED_HOSTS=['*'],
    SESSION_ENGINE='django.contrib.sessions.backends.signed_cookies',
    INSTALLED_APPS=[
        'django.contrib.contenttypes',
        'django.contrib.auth',
        'django.contrib.sessions',
    ],
    MIDDLEWARE=[
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
    ],
    ROOT_URLCONF=__name__,
    TEMPLATES=[{
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
            ],
        },
    }],
    DATABASES={
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'mock_db.sqlite3',
        }
    },
    DEFAULT_AUTO_FIELD='django.db.models.BigAutoField',
)

import django
django.setup()

from django.db import models

class User(models.Model):
    user_id   = models.AutoField(primary_key=True)
    username  = models.CharField(max_length=150)
    is_admin  = models.BooleanField(default=False)
    class Meta:
        app_label = 'app'
        db_table  = 'users'

class Quiz(models.Model):
    quiz_id     = models.AutoField(primary_key=True)
    question    = models.CharField(max_length=255)
    answer      = models.CharField(max_length=255)
    class Meta:
        app_label = 'app'
        db_table  = 'quizzes'

class QuizAttempt(models.Model):
    attempt_id   = models.AutoField(primary_key=True)
    user         = models.ForeignKey(User, on_delete=models.CASCADE)
    quiz         = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    user_answer  = models.CharField(max_length=255)
    is_correct   = models.BooleanField()
    created_at   = models.DateTimeField(auto_now_add=True)
    class Meta:
        app_label = 'app'
        db_table  = 'quiz_attempts'

Implement these HTTP endpoints and behaviors, storing user_id and is_admin in Djangoâ€™s session (no password):

1. Login  
   * GET  /login/<int:user_id>/  
   * If a User with that ID exists, set session['user_id'] and session['is_admin'], return 200; otherwise return 404.

2. View All Quizzes  
   * GET /quizzes/  
   * Public. List all quizzes with their ID and question text.

3. Submit Answer  
   * POST /quizzes/<int:quiz_id>/answer/  
   * Logged-in users only. Accept `user_answer` in POST data. Check if it matches the correct answer. Save result in `QuizAttempt`.

4. View My Attempts  
   * GET /attempts/  
   * Logged-in users only. Return list of the user's attempts with question, user's answer, correctness, and date.

Embed all HTML templates inline in app.py using Template.

After views, define module-level urlpatterns like so:

from django.urls import path

urlpatterns = [
    path('login/<int:user_id>/', login, name='login'),
    path('quizzes/', list_quizzes, name='list_quizzes'),
    path('quizzes/<int:quiz_id>/answer/', submit_answer, name='submit_answer'),
    path('attempts/', view_attempts, name='view_attempts'),
]

In the if __name__ == '__main__': block, introspect tables and create them manually with schema_editor if needed:

from django.db import connection

existing = connection.introspection.table_names()
with connection.schema_editor() as schema_editor:
    if 'users' not in existing: schema_editor.create_model(User)
    if 'quizzes' not in existing: schema_editor.create_model(Quiz)
    if 'quiz_attempts' not in existing: schema_editor.create_model(QuizAttempt)

user1 = User.objects.create(username='alice', is_admin=False)
user2 = User.objects.create(username='bob', is_admin=True)

Quiz.objects.create(question='What is 2 + 2?', answer='4')
Quiz.objects.create(question='What is the capital of France?', answer='Paris')

QuizAttempt.objects.create(user=user1, quiz=Quiz.objects.get(quiz_id=1), user_answer='4', is_correct=True)
QuizAttempt.objects.create(user=user2, quiz=Quiz.objects.get(quiz_id=2), user_answer='London', is_correct=False)

from django.core.management import execute_from_command_line
execute_from_command_line(['', 'runserver'])

Do not use migrations or external files. Provide only the complete app.py code, with no explanation.