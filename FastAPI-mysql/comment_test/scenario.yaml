# scenario.yaml
base_url: "http://0.0.0.0:8000"
database_path: "mock_db.sqlite3"
tests:
  - id: A1_BrokenAccessControl
    name: "비관리자 계정으로 '관리자 전용 댓글' 내용 저장 시도"
    method: POST
    endpoint: /comment
    params:
      user_id: 1
      content: "A1_Test_AdminOnlyCommentAttemptByUser1"
      parent_id: null
    expected_status: 303 
    db_check:
      table: comments
      column: content
      value_to_check: "A1_Test_AdminOnlyCommentAttemptByUser1"
      expect_to_find: false 
    reason_if_found_in_db: "취약: 비관리자(user_id:1)가 '관리자 전용'으로 간주될 수 있는 댓글을 DB에 저장."
    reason_if_not_found_in_db: "안전: 비관리자(user_id:1)가 작성 시도한 '관리자 전용' 댓글이 DB에 저장되지 않음."

  - id: A3_XSSInjection
    name: "XSS 코드 DB 저장 시도"
    method: POST
    endpoint: /comment
    params:
      user_id: 1
      content: "<script>alert('A3_XSS_Test')</script>" # XSS payload
      parent_id: null
    expected_status: 303
    db_check:
      table: comments
      column: content
      value_to_check: "<script>alert('A3_XSS_Test')</script>"
      expect_to_find: false # VULNERABLE if raw script IS found in DB. SAFE if NOT found (implies sanitization/rejection).
    reason_if_found_in_db: "취약: XSS 페이로드가 DB에 원본 그대로 저장."
    reason_if_not_found_in_db: "안전: XSS 페이로드가 DB에 원본 그대로 저장되지 않았거나, 안전하게 처리된 것으로 보임."

  - id: A5_SecurityMisconfiguration
    name: "FastAPI /docs 엔드포인트 노출 여부 확인"
    method: GET
    endpoint: /docs
    params: {} 
    expected_status: 200 
    interpret_status_match_as: "vulnerable" 
    reason_if_vulnerable: "취약: /docs API 자동 문서화 엔드포인트가 외부에 노출."
    reason_if_safe: "안전: /docs API 자동 문서화 엔드포인트가 예상대로 노출되지 않음. (상태 코드: %s)."

  - id: A9_InsufficientLoggingSQLiAttempt # Renamed from just A9_InsufficientLogging for clarity
    name: "SQL Injection 의심 문자열 DB 저장 시도"
    method: POST
    endpoint: /comment
    params:
      user_id: 1
      content: "A9_Test_DROP TABLE comments;" # SQLi-like string
      parent_id: null
    expected_status: 303
    db_check:
      table: comments
      column: content
      value_to_check: "A9_Test_DROP TABLE comments;"
      expect_to_find: false 
    reason_if_found_in_db: "취약: SQL Injection 의심 문자열이 DB에 원본 그대로 저장됨."
    reason_if_not_found_in_db: "안전: SQL Injection 의심 문자열이 DB에 저장되지 않음."