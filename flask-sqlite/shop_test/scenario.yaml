# scenario.yaml
scenarios:
  - id: A1_Injection
    name: "SQL Injection"
    description: "products 조회 엔드포인트에 SQL 인젝션 시도"
    request:
      method: GET
      url: "/products/1 OR 1=1"
    expect:
      status_code_range: "5xx"

  - id: A2_BrokenAuthentication
    name: "Broken Authentication"
    description: "로그인 없이 /cart 접근 시 로그인 리다이렉트"
    request:
      method: GET
      url: "/cart"
    expect:
      status_code: 302

  - id: A3_SensitiveDataExposure
    name: "Sensitive Data Exposure"
    description: "존재하지 않는 product 조회로 에러 발생 시 secret_key 노출 여부 확인"
    request:
      method: GET
      url: "/products/invalid"
    expect:
      status_code_range: "5xx"
      body_contains: "your_secret_key"

  - id: A4_XXE
    name: "XML External Entities"
    description: "XML 파싱이 없는 제품 상세 조회에 XXE 페이로드 전송"
    request:
      method: POST
      url: "/products/1"
      headers:
        Content-Type: "application/xml"
      data: |
        <?xml version="1.0"?>
        <!DOCTYPE foo [
          <!ELEMENT foo ANY >
          <!ENTITY xxe SYSTEM "file:///etc/passwd" >
        ]>
        <foo>&xxe;</foo>
    expect:
      status_code_range: "4xx"

  - id: A5_BrokenAccessControl
    name: "Broken Access Control"
    description: "비관리자 계정으로 상품 추가 시도"
    request:
      method: POST
      url: "/admin/product"
      form:
        name: "Hacked"
        description: "권한 검증 우회"
        price: "1.23"
    expect:
      status_code: 302
    db_check:
      query: "SELECT COUNT(*) FROM products WHERE name='Hacked';"
      expected: 0

  - id: A6_SecurityMisconfiguration
    name: "Security Misconfiguration"
    description: "Flask 디버그 모드 등 설정 노출 여부 확인 (/shutdown 엔드포인트 확인)"
    request:
      method: GET
      url: "/shutdown"
    expect:
      status_code: 404

  - id: A7_CrossSiteScripting
    name: "Cross-Site Scripting"
    description: "관리자 상품 추가 시 XSS 페이로드 입력"
    request:
      method: POST
      url: "/admin/product"
      session:
        user_id: "admin"
        is_admin: "true"
      form:
        name: "<script>alert(1)</script>"
        description: "XSS 테스트"
        price: "1"
    expect:
      status_code: 302
    db_check:
      query: "SELECT COUNT(*) FROM products WHERE name LIKE '%<script>alert(1)</script>%';"
      expected: 0

  - id: A8_InsecureDeserialization
    name: "Insecure Deserialization"
    description: "세션 쿠키에 악성 pickle 넣어 /cart 접근"
    request:
      method: GET
      url: "/cart"
      cookies:
        session: "<malicious_pickle_data>"
    expect:
      status_code_range: "4xx"

  - id: A9_InsufficientLogging
    name: "Insufficient Logging"
    description: "신고 기능 없이 악성 입력 시 로깅/모니터링 누락 확인"
    request:
      method: POST
      url: "/report"
      form:
        content: "x'; DROP TABLE users;--"
        user_id: "1"
    expect:
      status_code: 302
    db_check:
      query: "SELECT COUNT(*) FROM report WHERE content LIKE '%DROP TABLE users%';"
      expected: 0

  - id: A10_SSRF
    name: "Server-Side Request Forgery"
    description: "외부 URL fetch 파라미터 SSRF 시도"
    request:
      method: GET
      url: "/external?url=http://169.254.169.254/latest/meta-data"
    expect:
      status_code_range: "4xx"
