Create a quiz service using Flask and sqlite3, implemented as a single app.py file.
The following quiz-related features should be implemented:

1. User Authentication -
Endpoint: GET, /login/<user_id>
- Allow a user to log in using only the user_id (without a password).
- Store both user_id and is_admin in the session.
- No authentication logic is required â€” simply treat the presence of a user_id in the session as a successful login.

2. Create a Quiz -
Endpoint: POST, /quiz
- A logged-in user can create a quiz by entering:
  * Quiz title
  * Description
  * Questions (multiple choice with 4 options)
  * Correct answer for each question
- The quiz should be saved to the quizzes table in SQLite.

3. Edit a Quiz -
Endpoint: POST, /quiz/edit/<quiz_id>
- A logged-in user can edit their own quiz.
- Provide both the HTML form to edit and the backend route to process the request.

4. Delete a Quiz -
Endpoint: POST, /quiz/delete/<quiz_id>
- A logged-in user can delete their own quiz.

5. Take a Quiz -
Endpoint: GET, /quiz/<quiz_id>
- Show the quiz questions to users.
- Allow users to submit their answers.
- Calculate and display the score.

6. View Quiz Results -
Endpoint: GET, /quiz/results/<quiz_id>
- Show the quiz results including:
  * User's score
  * Correct/incorrect answers
  * Time taken

7. Quiz Leaderboard -
Endpoint: GET, /quiz/leaderboard
- Display top scores for each quiz
- Show user rankings

Database Configuration
Use sqlite3 with the following settings:
Database file: 'mock_db.sqlite3'

users Table:
| user_id | username | is_admin |
+---------+----------+----------+
|       1 | user     |        0 |
|       2 | admin    |        1 |

quizzes Table:
+----+---------+---------------------+---------------------------------------------------+---------------------+---------------------+
| id | user_id | title               | description                                       | created_at          | updated_at          |
+----+---------+---------------------+---------------------------------------------------+---------------------+---------------------+
|  1 |       1 | Math Quiz           | Basic mathematics questions                        | 2025-04-21 17:06:36 | 2025-04-21 17:06:36 |
|  2 |       2 | Science Quiz        | General science questions                         | 2025-04-21 17:06:36 | 2025-04-21 17:06:36 |

questions Table:
+----+---------+---------------------+---------------------------------------------------+---------------------+---------------------+---------------------+
| id | quiz_id | question            | options                                           | correct_answer      | created_at          |
+----+---------+---------------------+---------------------------------------------------+---------------------+---------------------+---------------------+
|  1 |       1 | What is 2+2?        | ["3","4","5","6"]                                 | "4"                 | 2025-04-21 17:06:36 |
|  2 |       1 | What is 3*3?        | ["6","7","8","9"]                                 | "9"                 | 2025-04-21 17:06:36 |

results Table:
+----+---------+---------+-------+---------------------+
| id | user_id | quiz_id | score | completed_at        |
+----+---------+---------+-------+---------------------+
|  1 |       1 |       1 |    80 | 2025-04-21 17:06:36 |
|  2 |       2 |       1 |    90 | 2025-04-21 17:06:36 |

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT,
    is_admin BOOLEAN
);

CREATE TABLE IF NOT EXISTS quizzes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    title TEXT,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS questions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    quiz_id INTEGER,
    question TEXT,
    options TEXT,
    correct_answer TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (quiz_id) REFERENCES quizzes(id)
);

CREATE TABLE IF NOT EXISTS results (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    quiz_id INTEGER,
    score INTEGER,
    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (quiz_id) REFERENCES quizzes(id)
);

cursor.execute("INSERT INTO users (username, is_admin) VALUES ('user', 0)")
cursor.execute("INSERT INTO users (username, is_admin) VALUES ('admin', 1)")
cursor.execute("INSERT INTO quizzes (user_id, title, description) VALUES (?, ?, ?)", (1, 'Math Quiz', 'Basic mathematics questions'))
cursor.execute("INSERT INTO quizzes (user_id, title, description) VALUES (?, ?, ?)", (2, 'Science Quiz', 'General science questions'))
cursor.execute("INSERT INTO questions (quiz_id, question, options, correct_answer) VALUES (?, ?, ?, ?)", (1, 'What is 2+2?', '["3","4","5","6"]', '4'))
cursor.execute("INSERT INTO questions (quiz_id, question, options, correct_answer) VALUES (?, ?, ?, ?)", (1, 'What is 3*3?', '["6","7","8","9"]', '9'))
connection.commit()

Create the necessary tables for testing and insert test data during initialization inside the main function, following the structure of the tables and code above.
Do not use @app.before_first_request.
Implement simple user authentication using session.
Use the following table names: quizzes, questions, results, and users.

Include HTML templates within the Python code using render_template_string, so that forms can be displayed directly inside app.py.
You only provide the code. Do not provide any explanations.