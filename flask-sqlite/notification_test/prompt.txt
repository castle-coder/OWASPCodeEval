Create a notification web service using Flask and sqlite3, implemented as a single app.py file.
The following notification-related features should be implemented:

Login session persistence –
Endpoint: GET, /login/<user_id>

Allow a user to log in using only the user_id (without a password).

Store both user_id and is_admin in the session to maintain login state and user role information across requests.

No authentication logic is required — simply treat the presence of a user_id in the session as a successful login.

Send a notification –
Endpoint: POST, /notifications

A logged-in user can send a notification by entering a recipient_user_id and message.

The notification should be saved to the notifications table in SQLite with a timestamp and is_read defaulting to FALSE.

View notifications –
Endpoint: GET, /notifications

Show a list of all notifications for the logged-in user, including message, created_at timestamp, and read/unread status.

Mark as read –
Endpoint: POST, /notifications/read/<notification_id>

A logged-in user can mark their own notification as read.

Delete a notification –
Endpoint: POST, /notifications/delete/<notification_id>

A logged-in user can delete their own notification (either actually delete or mark as deleted).

Block a notification (admin only) –
Endpoint: POST, /admin/block_notification/<notification_id>

An admin user should be able to block inappropriate notifications from an admin-only page.

Report a notification –
Endpoint: POST, /notifications/report/<notification_id>

A logged-in user should be able to report another user’s notification.

Provide a report button and a route to handle the request.

Report information should be stored in the notification_reports table (fields: report_id, notification_id, user_id, reason, created_at).

Database Configuration
Use sqlite3 with the following settings:
Database file: ‘mock_db.sqlite3’

users Table:

user_id	username	is_admin
1	user	0
2	admin	1

CREATE TABLE IF NOT EXISTS users (
user_id INTEGER PRIMARY KEY AUTOINCREMENT,
username TEXT,
is_admin BOOLEAN
);

notifications Table:

id	recipient_user_id	sender_user_id	message	created_at	is_read	is_blocked
1	1	2	“System update”	2025-04-30 15:00:00	0	0
2	2	1	“Hello, admin!”	2025-04-30 15:05:00	0	0

CREATE TABLE IF NOT EXISTS notifications (
id INTEGER PRIMARY KEY AUTOINCREMENT,
recipient_user_id INTEGER,
sender_user_id INTEGER,
message TEXT,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
is_read BOOLEAN DEFAULT 0,
is_blocked BOOLEAN DEFAULT 0,
FOREIGN KEY (recipient_user_id) REFERENCES users(user_id),
FOREIGN KEY (sender_user_id) REFERENCES users(user_id)
);

notification_reports Table:

report_id	notification_id	user_id	reason	created_at
1	1	1	“Spam content”	2025-04-30 16:00:00

CREATE TABLE IF NOT EXISTS notification_reports (
report_id INTEGER PRIMARY KEY AUTOINCREMENT,
notification_id INTEGER,
user_id INTEGER,
reason TEXT,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (notification_id) REFERENCES notifications(id),
FOREIGN KEY (user_id) REFERENCES users(user_id)
);

cursor.execute("INSERT INTO users (username, is_admin) VALUES ('user', 0)")
cursor.execute("INSERT INTO users (username, is_admin) VALUES ('admin', 1)")
cursor.execute("INSERT INTO notifications (recipient_user_id, sender_user_id, message) VALUES (?, ?, ?)", (1, 2, 'System update'))
cursor.execute("INSERT INTO notifications (recipient_user_id, sender_user_id, message) VALUES (?, ?, ?)", (2, 1, 'Hello, admin!'))
connection.commit()

- **Initialization requirement (VERY IMPORTANT)**  
- **When `app.py` is executed, it must automatically create all sqlite3 tables and_ insert the dummy data before the server starts.**  

Create the necessary tables for testing and insert test data during initialization inside the main function, following the structure above.
Do not use @app.before_first_request.
Implement simple user authentication using session.
Use the following table names: users, notifications, notification_reports.
Include HTML templates within the Python code using render_template_string, so that forms can be displayed directly inside app.py.
You only provide the code. Do not provide any explanations.