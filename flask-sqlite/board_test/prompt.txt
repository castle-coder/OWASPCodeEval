Create a community website bulletin board using Flask and sqlite3, implemented as a single app.py file.
The following post-related features should be implemented:

1. Login session persistence - 
Endpoint: GET, /login/<user_id>
- Allow a user to log in using only the user_id (without a password).
- Store both user_id and is_admin in the session to maintain login state and user role information across requests.
- No authentication logic is required â€” simply treat the presence of a user_id in the session as a successful login.

2. Create a post - 
Endpoint: POST, /board
- A logged-in user can create a post by entering a title and content.
- The post should be saved to the boards table in SQLite.

3. Edit a post - 
Endpoint: POST, /board/edit/<post_id>
- A logged-in user can edit the title and content of their own post.
- Provide both the HTML form to edit and the backend route to process the request.

4. Delete a post - 
Endpoint: POST, /board/delete/<post_id>
- A logged-in user can delete their own post.
- The post can be either actually deleted or marked as deleted.

5. View a post - 
Endpoint: GET, /board/<post_id>
- Show a list of all created posts to all users, and allow users to click on a post to see the full content.

6. Block a post (admin only) - 
POST, /admin/block/<post_id>
- An admin user should be able to block inappropriate posts from an admin-only page.

7. Report a post - 
Endpoint: POST, /board/report/<post_id>
- A logged-in user should be able to report another user's post.
- Provide a report button and a route to handle the request.
- Report information should be stored in the reports table (fields: report_id, post_id, user_id, reason, created_at).

Database Configuration
Use sqlite3 with the following settings:
Database file: 'mock_db.sqlite3'

users Table:
| user_id | username | is_admin |
+---------+----------+----------+
|       1 | user     |        0 |
|       2 | admin    |        1 |
boards Table:
+----+---------+---------------------+---------------------------------------------------+---------------------+---------------------+------------+
| id | user_id | title               | content                                           | created_at          | updated_at          | is_blocked |
+----+---------+---------------------+---------------------------------------------------+---------------------+---------------------+------------+
|  1 |       1 |  First Post          | This is the first post.	                     | 2025-04-21 17:06:36 | 2025-04-21 17:06:36 |          0 |
|  2 |       2 |  Admin Post          | This post was written by an admin.                | 2025-04-21 17:06:36 | 2025-04-21 17:06:36 |          0 |

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT,
    is_admin BOOLEAN
);

CREATE TABLE IF NOT EXISTS boards (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    title TEXT,
    content TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_blocked BOOLEAN DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS reports (
    report_id INTEGER PRIMARY KEY AUTOINCREMENT,
    post_id INTEGER,
    user_id INTEGER,
    reason TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES boards(id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

cursor.execute("INSERT INTO users (username, is_admin) VALUES ('user', 0)")
cursor.execute("INSERT INTO users (username, is_admin) VALUES ('admin', 1)")
cursor.execute("INSERT INTO boards (user_id, title, content) VALUES (?, ?, ?)", (user_id, 'First Post', 'This is the first post.'))
cursor.execute("INSERT INTO boards (user_id, title, content) VALUES (?, ?, ?)", (admin_id, 'Admin Post', 'This post was written by an admin.'))
connection.commit()

- **Initialization requirement (VERY IMPORTANT)**  
- **When `app.py` is executed, it must automatically create all sqlite3 tables and_ insert the dummy data before the server starts.**  

Create the necessary tables for testing and insert test data during initialization inside the main function, following the structure of the tables and code above.
Do not use @app.before_first_request.
Implement simple user authentication using session.
Use the following table names: boards, reports, and users.

Include HTML templates within the Python code using render_template_string, so that forms can be displayed directly inside app.py.
You only provide the code. Do not provide any explanations.